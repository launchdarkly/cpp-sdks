#pragma once

#include <launchdarkly/sse/error.hpp>
#include <launchdarkly/sse/event.hpp>

#include <boost/asio/any_io_executor.hpp>
#include <boost/beast/http/empty_body.hpp>
#include <boost/beast/http/message.hpp>
#include <boost/beast/http/string_body.hpp>

#include <functional>
#include <future>
#include <memory>
#include <optional>
#include <string>

namespace launchdarkly::sse {

namespace beast = boost::beast;
namespace http = beast::http;
namespace net = boost::asio;

class Client;

/**
 * Builder can be used to create an instance of Client. Minimal example:
 * @code
 * auto client = launchdarkly::sse::Builder(executor,
 * "https://example.com").build();
 * @endcode
 */
class Builder {
   public:
    using EventReceiver = std::function<void(Event)>;
    using LogCallback = std::function<void(std::string)>;
    using ErrorCallback = std::function<void(Error)>;

    /**
     * Create a builder for the given URL. If the port is omitted, 443 is
     * assumed for https scheme while 80 is assumed for http scheme.
     *
     * Example: https://example.com:8123/endpoint
     *
     * @param ioc Executor for the Client.
     * @param url Server-Sent-Events server URL.
     */
    Builder(net::any_io_executor ioc, std::string url);

    /**
     * Add a custom header to the initial request. The following headers
     * are added by default and can be overridden:
     *
     * User-Agent: the default Boost.Beast user agent.
     * Accept: text/event-stream
     * Cache-Control: no-cache
     *
     * Note that Content-Type and
     *
     * @param name Header name.
     * @param value Header value.
     * @return Reference to this builder.
     */
    Builder& header(std::string const& name, std::string const& value);

    /**
     * Specifies a request body. The body is sent when the method is POST or
     * REPORT.
     * @return Reference to this builder.
     */
    Builder& body(std::string);

    /**
     * Specifies the maximum time duration between subsequent reads from the
     * stream. A read counts as receiving any amount of bytes.
     * @param timeout
     * @return Reference to this builder.
     */
    Builder& read_timeout(std::chrono::milliseconds timeout);

    /**
     * Specifies the maximum time duration to establish the connection.
     * @param timeout
     * @return Reference to this builder.
     */
    Builder& connect_timeout(std::chrono::milliseconds timeout);

    /**
     * Specifies the maximum time duration to write the initial request.
     * @param timeout
     * @return Reference to this builder.
     */
    Builder& write_timeout(std::chrono::milliseconds timeout);

    /**
     * Specifies the initial delay before reconnection when backoff takes place
     * due to an error on the connection.
     * @param timeout
     * @return Reference to this builder.
     */
    Builder& initial_reconnect_delay(std::chrono::milliseconds delay);

    /**
     * Specify the method for the initial request. The default method is GET.
     * @param verb The HTTP method.
     * @return Reference to this builder.
     */
    Builder& method(http::verb verb);

    /**
     * Specify a receiver of events generated by the Client. For example:
     * @code
     * builder.receiver([](launchdarkly::sse::Event event) -> void {
     *        std::cout << event.type() << ": " << event.data() << std::endl;
     * });
     * @endcode
     *
     * @return Reference to this builder.
     */
    Builder& receiver(EventReceiver);

    /**
     * Specify a logging callback for the Client.
     * @param callback Callback to receive a string from the Client.
     * @return Reference to this builder.
     */
    Builder& logger(LogCallback callback);

    /**
     * Specify an error reporting callback for the Client.
     * @param callback Callback to receive an error from the Client.
     * @return Reference to this builder.
     */
    Builder& errors(ErrorCallback callback);

    /**
     * If connecting to an endpoint with TLS, whether to skip verifying the
     * remote peer's certificates. Verification is enabled by default.
     *
     * @param skip_verify_peer True to skip verification, false to verify.
     * @return Reference to this builder.
     */
    Builder& skip_verify_peer(bool skip_verify_peer);

    /**
     * Specify the path to a CA bundle file for verifying the peer's
     * certificate.
     *
     * By default, the system's CA bundle is used. Passing an empty string will
     * unset any previously set path and revert to the system's CA bundle.
     *
     * @param path The filepath.
     * @return Reference to this builder.
     */
    Builder& custom_ca_file(std::string path);

    /**
     * Specify a proxy URL for the connection. When set, it takes precedence
     * over environment variables (ALL_PROXY, HTTP_PROXY, HTTPS_PROXY).
     *
     * Supported proxy types (when CURL networking is enabled):
     * - HTTP proxies: "http://proxy:port"
     * - HTTPS proxies: "https://proxy:port"
     * - SOCKS4 proxies: "socks4://proxy:port"
     * - SOCKS5 proxies: "socks5://proxy:port" or "socks5://user:pass@proxy:port"
     * - SOCKS5 with DNS through proxy: "socks5h://proxy:port"
     *
     * Passing an empty string explicitly disables proxy (overrides environment variables).
     * Passing std::nullopt (or not calling this method) uses environment variables.
     *
     * @param url Proxy URL, empty string to disable, or std::nullopt for environment variables
     * @return Reference to this builder.
     * @throws std::runtime_error if proxy is configured without CURL networking support
     */
    Builder& proxy(std::optional<std::string> url);

    /**
     * Builds a Client. The shared pointer is necessary to extend the lifetime
     * of the Client to encompass each asynchronous operation that it performs.
     * @return New client; call run() to kickoff the connection process and
     * begin reading.
     */
    std::shared_ptr<Client> build();

   private:
    std::string url_;
    net::any_io_executor executor_;
    http::request<http::string_body> request_;
    std::optional<std::chrono::milliseconds> read_timeout_;
    std::optional<std::chrono::milliseconds> write_timeout_;
    std::optional<std::chrono::milliseconds> connect_timeout_;
    std::optional<std::chrono::milliseconds> initial_reconnect_delay_;
    LogCallback logging_cb_;
    EventReceiver receiver_;
    ErrorCallback error_cb_;
    bool skip_verify_peer_;
    std::optional<std::string> custom_ca_file_;
    std::optional<std::string> proxy_url_;
};

/**
 * Client is a long-lived Server-Sent-Events (EventSource) client which
 * reads from an event stream and dispatches events to a user-specified
 * receiver.
 */
class Client {
   public:
    virtual ~Client() = default;
    virtual void async_connect() = 0;
    virtual void async_shutdown(std::function<void()> completion) = 0;
};

}  // namespace launchdarkly::sse
