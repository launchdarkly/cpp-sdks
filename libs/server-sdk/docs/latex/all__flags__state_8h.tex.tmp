\hypertarget{all__flags__state_8h}{}\doxysection{include/launchdarkly/server\+\_\+side/bindings/c/all\+\_\+flags\+\_\+state/all\+\_\+flags\+\_\+state.h File Reference}
\label{all__flags__state_8h}\index{include/launchdarkly/server\_side/bindings/c/all\_flags\_state/all\_flags\_state.h@{include/launchdarkly/server\_side/bindings/c/all\_flags\_state/all\_flags\_state.h}}
{\ttfamily \#include $<$launchdarkly/bindings/c/export.\+h$>$}\newline
{\ttfamily \#include $<$launchdarkly/bindings/c/status.\+h$>$}\newline
{\ttfamily \#include $<$launchdarkly/bindings/c/value.\+h$>$}\newline
Include dependency graph for all\+\_\+flags\+\_\+state.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{all__flags__state_8h_ae3ee990bdd9aeef9595e57f180be2b99}\label{all__flags__state_8h_ae3ee990bdd9aeef9595e57f180be2b99}} 
typedef struct \+\_\+\+LDAll\+Flags\+State $\ast$ {\bfseries LDAll\+Flags\+State}
\end{DoxyCompactItemize}
\doxysubsection*{Enumerations}
\begin{DoxyCompactItemize}
\item 
enum \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05}{LDAll\+Flags\+State\+\_\+\+Options}} \{ \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05afbbdd20f24438b24c72ca321eb65da01}{LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+DEFAULT}} = 0
, \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05aad06d0765c0265ca45061ba241f91775}{LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+INCLUDE\+\_\+\+REASONS}} = (1 $<$$<$ 0)
, \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05ad0fa772b2f168f9b8806fe359e8f8139}{LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+DETAILS\+\_\+\+ONLY\+\_\+\+FOR\+\_\+\+TRACKED\+\_\+\+FLAGS}} = (1 $<$$<$ 1)
, \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05a8b9e50efc011dedf4dfb2da0fb2691b9}{LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+CLIENT\+\_\+\+SIDE\+\_\+\+ONLY}} = (1 $<$$<$ 2)
 \}
\end{DoxyCompactItemize}
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{all__flags__state_8h_a96c7779a0cfec95f4ece16608b5eefa6}{LD\+\_\+\+EXPORT}} (void) LDAll\+Flags\+State\+\_\+\+Free(LDAll\+Flags\+State state)
\item 
\mbox{\hyperlink{all__flags__state_8h_ada63e8544be77d4c70580e4e3665ef3d}{LD\+\_\+\+EXPORT}} (bool) LDAll\+Flags\+State\+\_\+\+Valid(LDAll\+Flags\+State state)
\item 
\mbox{\hyperlink{all__flags__state_8h_aed28d32312ccd343be70d4ff328e5142}{LDAll\+Flags\+State\+\_\+\+Serialize\+JSON}} (LDAll\+Flags\+State state)
\item 
\mbox{\hyperlink{all__flags__state_8h_ae21095bad27769082ca6764d656d9299}{LDAll\+Flags\+State\+\_\+\+Value}} (LDAll\+Flags\+State state, char const $\ast$flag\+\_\+key)
\end{DoxyCompactItemize}


\doxysubsection{Enumeration Type Documentation}
\mbox{\Hypertarget{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05}\label{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05}} 
\index{all\_flags\_state.h@{all\_flags\_state.h}!LDAllFlagsState\_Options@{LDAllFlagsState\_Options}}
\index{LDAllFlagsState\_Options@{LDAllFlagsState\_Options}!all\_flags\_state.h@{all\_flags\_state.h}}
\doxysubsubsection{\texorpdfstring{LDAllFlagsState\_Options}{LDAllFlagsState\_Options}}
{\footnotesize\ttfamily enum \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05}{LDAll\+Flags\+State\+\_\+\+Options}}}

Defines options that may be used with LDServer\+SDK\+\_\+\+All\+Flags\+State. To obtain default behavior, pass LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+DEFAULT.

It is possible to combine multiple options by ORing them together.

Example\+: 
\begin{DoxyCode}{0}
\DoxyCodeLine{LDAllFlagsState state = \mbox{\hyperlink{sdk_8h_a1818dc11a268da7d0587c009976c14d8}{LDServerSDK\_AllFlagsState}}(sdk, context,}
\DoxyCodeLine{   \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05aad06d0765c0265ca45061ba241f91775}{LD\_ALLFLAGSSTATE\_INCLUDE\_REASONS}} | \mbox{\hyperlink{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05a8b9e50efc011dedf4dfb2da0fb2691b9}{LD\_ALLFLAGSSTATE\_CLIENT\_SIDE\_ONLY}}}
\DoxyCodeLine{);}

\end{DoxyCode}
 \begin{DoxyEnumFields}{Enumerator}
\raisebox{\heightof{T}}[0pt][0pt]{\index{LD\_ALLFLAGSSTATE\_DEFAULT@{LD\_ALLFLAGSSTATE\_DEFAULT}!all\_flags\_state.h@{all\_flags\_state.h}}\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_ALLFLAGSSTATE\_DEFAULT@{LD\_ALLFLAGSSTATE\_DEFAULT}}}\mbox{\Hypertarget{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05afbbdd20f24438b24c72ca321eb65da01}\label{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05afbbdd20f24438b24c72ca321eb65da01}} 
LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+DEFAULT&Default behavior. \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{LD\_ALLFLAGSSTATE\_INCLUDE\_REASONS@{LD\_ALLFLAGSSTATE\_INCLUDE\_REASONS}!all\_flags\_state.h@{all\_flags\_state.h}}\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_ALLFLAGSSTATE\_INCLUDE\_REASONS@{LD\_ALLFLAGSSTATE\_INCLUDE\_REASONS}}}\mbox{\Hypertarget{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05aad06d0765c0265ca45061ba241f91775}\label{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05aad06d0765c0265ca45061ba241f91775}} 
LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+INCLUDE\+\_\+\+REASONS&Include evaluation reasons in the state object. By default, they are not. \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{LD\_ALLFLAGSSTATE\_DETAILS\_ONLY\_FOR\_TRACKED\_FLAGS@{LD\_ALLFLAGSSTATE\_DETAILS\_ONLY\_FOR\_TRACKED\_FLAGS}!all\_flags\_state.h@{all\_flags\_state.h}}\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_ALLFLAGSSTATE\_DETAILS\_ONLY\_FOR\_TRACKED\_FLAGS@{LD\_ALLFLAGSSTATE\_DETAILS\_ONLY\_FOR\_TRACKED\_FLAGS}}}\mbox{\Hypertarget{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05ad0fa772b2f168f9b8806fe359e8f8139}\label{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05ad0fa772b2f168f9b8806fe359e8f8139}} 
LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+DETAILS\+\_\+\+ONLY\+\_\+\+FOR\+\_\+\+TRACKED\+\_\+\+FLAGS&Include detailed flag metadata only for flags with event tracking or debugging turned on.

This reduces the size of the JSON data if you are passing the flag state to the front end. \\
\hline

\raisebox{\heightof{T}}[0pt][0pt]{\index{LD\_ALLFLAGSSTATE\_CLIENT\_SIDE\_ONLY@{LD\_ALLFLAGSSTATE\_CLIENT\_SIDE\_ONLY}!all\_flags\_state.h@{all\_flags\_state.h}}\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_ALLFLAGSSTATE\_CLIENT\_SIDE\_ONLY@{LD\_ALLFLAGSSTATE\_CLIENT\_SIDE\_ONLY}}}\mbox{\Hypertarget{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05a8b9e50efc011dedf4dfb2da0fb2691b9}\label{all__flags__state_8h_af805163c3e16f0197ec9547f2d799d05a8b9e50efc011dedf4dfb2da0fb2691b9}} 
LD\+\_\+\+ALLFLAGSSTATE\+\_\+\+CLIENT\+\_\+\+SIDE\+\_\+\+ONLY&Include only flags marked for use with the client-\/side SDK. By default, all flags are included. \\
\hline

\end{DoxyEnumFields}


\doxysubsection{Function Documentation}
\mbox{\Hypertarget{all__flags__state_8h_ada63e8544be77d4c70580e4e3665ef3d}\label{all__flags__state_8h_ada63e8544be77d4c70580e4e3665ef3d}} 
\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_EXPORT@{LD\_EXPORT}}
\index{LD\_EXPORT@{LD\_EXPORT}!all\_flags\_state.h@{all\_flags\_state.h}}
\doxysubsubsection{\texorpdfstring{LD\_EXPORT()}{LD\_EXPORT()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily LD\+\_\+\+EXPORT (\begin{DoxyParamCaption}\item[{bool}]{ }\end{DoxyParamCaption})}

True if the LDAll\+Flags\+State is valid. False if there was an error, such as the data store being unavailable.

An invalid LDAll\+Flags\+State can still be serialized successfully to a JSON string.


\begin{DoxyParams}{Parameters}
{\em state} & The LDAll\+Flag\+State to check for validity. Must not be NULL. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
True if the state is valid, false otherwise.
\end{DoxyReturn}
Check if an array-\/type iterator is at the end.


\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to check. Must not be NULL. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
True if the iterator is at the end.
\end{DoxyReturn}
Check if an object-\/type iterator is at the end.


\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to check. Must not be NULL. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
True if the iterator is at the end. 
\end{DoxyReturn}
\mbox{\Hypertarget{all__flags__state_8h_a96c7779a0cfec95f4ece16608b5eefa6}\label{all__flags__state_8h_a96c7779a0cfec95f4ece16608b5eefa6}} 
\index{all\_flags\_state.h@{all\_flags\_state.h}!LD\_EXPORT@{LD\_EXPORT}}
\index{LD\_EXPORT@{LD\_EXPORT}!all\_flags\_state.h@{all\_flags\_state.h}}
\doxysubsubsection{\texorpdfstring{LD\_EXPORT()}{LD\_EXPORT()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily LD\+\_\+\+EXPORT (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}

Frees an All\+Flags\+State. 
\begin{DoxyParams}{Parameters}
{\em state} & The All\+Flag\+State to free.\\
\hline
\end{DoxyParams}
Frees the data source status. 
\begin{DoxyParams}{Parameters}
{\em status} & The data source status to free.\\
\hline
\end{DoxyParams}
Add a value to an array builder.

After calling this method the provider LDValue is consumed. It should not be accessed, and the caller doesn\textquotesingle{}t need to call LDValue\+\_\+\+Free.


\begin{DoxyParams}{Parameters}
{\em array\+\_\+builder} & The array builder to add the value to. Must not be NULL. \\
\hline
{\em val} & The value to add. Must not be NULL.\\
\hline
\end{DoxyParams}
Frees a basic logging builder. Do not call if the builder was consumed by the config builder. 
\begin{DoxyParams}{Parameters}
{\em b} & Builder to free.\\
\hline
\end{DoxyParams}
Frees a custom logging builder. Do not call if the builder was consumed by the config builder. 
\begin{DoxyParams}{Parameters}
{\em b} & Builder to free.\\
\hline
\end{DoxyParams}
Move the array-\/type iterator to the next item. Should only be done for an iterator which is not at the end.


\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to advance. Must not be NULL.\\
\hline
\end{DoxyParams}
Destroy an array iterator. 
\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to destroy.\\
\hline
\end{DoxyParams}
Move the object-\/type iterator to the next item. Should only be done for an iterator which is not at the end.


\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to advance. Must not be NULL.\\
\hline
\end{DoxyParams}
Destroy an object iterator. 
\begin{DoxyParams}{Parameters}
{\em iter} & The iterator to destroy.\\
\hline
\end{DoxyParams}
Free an array builder. This should only be done for a builder which has not been built. Calling LDArray\+Builder\+\_\+\+Build on an array builder transfers consumes the array builder.


\begin{DoxyParams}{Parameters}
{\em array\+\_\+builder} & The builder to free.\\
\hline
\end{DoxyParams}
Add a value to an array builder.

After calling this method the provider LDValue is consumed. It should not be accessed, and the caller doesn\textquotesingle{}t need to call LDValue\+\_\+\+Free.


\begin{DoxyParams}{Parameters}
{\em array\+\_\+builder} & The array builder to add the value to. Must not be NULL. \\
\hline
{\em val} & The value to add. Must not be NULL. \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{all__flags__state_8h_aed28d32312ccd343be70d4ff328e5142}\label{all__flags__state_8h_aed28d32312ccd343be70d4ff328e5142}} 
\index{all\_flags\_state.h@{all\_flags\_state.h}!LDAllFlagsState\_SerializeJSON@{LDAllFlagsState\_SerializeJSON}}
\index{LDAllFlagsState\_SerializeJSON@{LDAllFlagsState\_SerializeJSON}!all\_flags\_state.h@{all\_flags\_state.h}}
\doxysubsubsection{\texorpdfstring{LDAllFlagsState\_SerializeJSON()}{LDAllFlagsState\_SerializeJSON()}}
{\footnotesize\ttfamily LDAll\+Flags\+State\+\_\+\+Serialize\+JSON (\begin{DoxyParamCaption}\item[{LDAll\+Flags\+State}]{state }\end{DoxyParamCaption})}

Serializes the LDAll\+Flags\+State to a JSON string.

This JSON is suitable for bootstrapping a client-\/side SDK.


\begin{DoxyParams}{Parameters}
{\em state} & The LDAll\+Flag\+State to serialize. Must not be NULL. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A JSON string representing the LDAll\+Flags\+State. The caller must free the string using LDMemory\+\_\+\+Free\+String. 
\end{DoxyReturn}
\mbox{\Hypertarget{all__flags__state_8h_ae21095bad27769082ca6764d656d9299}\label{all__flags__state_8h_ae21095bad27769082ca6764d656d9299}} 
\index{all\_flags\_state.h@{all\_flags\_state.h}!LDAllFlagsState\_Value@{LDAllFlagsState\_Value}}
\index{LDAllFlagsState\_Value@{LDAllFlagsState\_Value}!all\_flags\_state.h@{all\_flags\_state.h}}
\doxysubsubsection{\texorpdfstring{LDAllFlagsState\_Value()}{LDAllFlagsState\_Value()}}
{\footnotesize\ttfamily LDAll\+Flags\+State\+\_\+\+Value (\begin{DoxyParamCaption}\item[{LDAll\+Flags\+State}]{state,  }\item[{char const $\ast$}]{flag\+\_\+key }\end{DoxyParamCaption})}

Returns the flag value for the context used to generate this LDAll\+Flags\+State.

In order to avoid copying when a large value is accessed, the returned LDValue is a reference and NOT DIRECTLY OWNED by the caller. Its lifetime is managed by the parent LDAll\+Flags\+State object.

WARNING! Do not free the returned LDValue. Do not in any way access the returned LDValue after the LDAll\+Flags\+State has been freed.

If the flag has no value, returns an LDValue of type LDValue\+Type\+\_\+\+Null.

To obtain a caller-\/owned copy of the LDValue not subject to these restrictions, call LDValue\+\_\+\+New\+Value on the result.


\begin{DoxyParams}{Parameters}
{\em state} & An LDAll\+Flags\+State. Must not be NULL. \\
\hline
{\em flag\+\_\+key} & Key of the flag. Must not be NULL. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The evaluation result of the flag. The caller MUST NOT free this value and MUST NOT access this value after the LDAll\+Flags\+State has been freed. 
\end{DoxyReturn}
